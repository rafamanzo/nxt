// Caio Salgado
// Caio Valente
// Rafael Reggiani Manzo
// Gustavo Katague
// Leandro Aono

#define COLOR Sensor(IN_2)
#define BLUE 42
#define RED 65
#define COLOR_ERROR 4

#define TOUCH Sensor(IN_1)

#define SONAR SensorUS(IN_4)
#define SONAR_DELAY 50

#define WHEELS_MOTOR_POWER 35

#define ki 500
#define kp 1
#define kd 2
#define MAX_CORRECTION_RATIO 15

#define DISTANCE_INCREASE_RATE 20
#define INITIAL_DISTANCE 20
#define BACKWARD_TIME_INCREASE_RATE 1000
#define INITIAL_BACKWARD_TIME 1000

bool danger;
int TOO_CLOSE;
mutex mut;

int eant;
int E;
int hits;
int BACKWARD_TIME;

/***************/
/* Subroutines */
/***************/

sub hit_left()
{
	RotateMotor(OUT_B,100,-360);
}

sub hit_right()
{
	RotateMotor(OUT_B,100,360);
}

sub rotate_dir()
{
  RotateMotor(OUT_C,WHEELS_MOTOR_POWER, 360);

  Off(OUT_AC);
}

sub rotate_esq()
{
  RotateMotor(OUT_A,WHEELS_MOTOR_POWER, 360);

  Off(OUT_AC);
}

sub backward()
{
  OnRevReg(OUT_AC,WHEELS_MOTOR_POWER,OUT_REGMODE_SPEED);
  Wait(BACKWARD_TIME);
  Off(OUT_AC);
}

sub global_vars_reset(){
  E = 0;
  eant = 0;
  danger = FALSE;
}

/*************/
/* Functions */
/*************/

int correction(int dist){
  int y = dist;
  int u = 0;
  int e = 0;
  int vve = 0;

  e = (dist-TOO_CLOSE);
  vve = e - eant;
  E = E+e;
  eant = e;

  u = kp*e+kd*vve+(E/ki);

  if(u > MAX_CORRECTION_RATIO) u = MAX_CORRECTION_RATIO;
  if(u < -MAX_CORRECTION_RATIO) u = -MAX_CORRECTION_RATIO;

  return u;
}

int side_wall_dist()
{
  int dist;
  Wait(SONAR_DELAY);
  dist = SONAR;
  return dist;
}

/*********/
/* TASKS */
/*********/

task hit_ball()
{
	int sens;
	while(TRUE)
	{
		sens = COLOR;

		if(sens > (BLUE - COLOR_ERROR) && sens < (BLUE + COLOR_ERROR))
		{
			hit_right();
		}
		else if(sens < RED + COLOR_ERROR && sens > RED - COLOR_ERROR)
		{
			hit_left();
		}
		Wait(150);
	}
}

task touch()
{
  while(TRUE)
  {
    if(SENSOR_1 == 1)
    {
      danger = TRUE;
      Acquire(mut);
        Off(OUT_AC);
        hits++;
        if(hits == 4)
        {
          BACKWARD_TIME=BACKWARD_TIME+BACKWARD_TIME_INCREASE_RATE;
          hits = 0;
          TOO_CLOSE = TOO_CLOSE+DISTANCE_INCREASE_RATE;
        }
        backward();
        rotate_dir();
        global_vars_reset();
      Release(mut);
    }
  }
}

task keep_wall_distance()
{
  int dist;
  
  while(TRUE)
  {
    if(danger == FALSE){
      dist = side_wall_dist();
      Acquire(mut);
        Float(OUT_AC);
        OnFwdReg(OUT_C,WHEELS_MOTOR_POWER-(correction(dist)),OUT_REGMODE_SPEED);
        OnFwdReg(OUT_A,WHEELS_MOTOR_POWER+(correction(dist)),OUT_REGMODE_SPEED);
      Release(mut);
    }
  }
}

task play_music ()
{
 while(TRUE) {
    PlayToneEx(392, 300, 9, FALSE);
    Wait(600);
    PlayToneEx(466, 300, 9, FALSE);
    Wait(600);
    PlayToneEx(523, 600, 9, FALSE);
    Wait(900);

    PlayToneEx(392, 300, 9, FALSE);
    Wait(600);
    PlayToneEx(466, 300, 9, FALSE);
    Wait(600);
    PlayToneEx(544, 300, 9, FALSE);
    Wait(300);
    PlayToneEx(523, 900, 9, FALSE);
    Wait(1200);


    PlayToneEx(392, 300, 9, FALSE);
    Wait(600);
    PlayToneEx(466, 300, 9, FALSE);
    Wait(600);
    PlayToneEx(523, 600, 9, FALSE);
    Wait(900);
    PlayToneEx(466, 300, 9, FALSE);
    Wait(600);
    PlayToneEx(392, 600, 9, FALSE);
    Wait(2100);
  }
}

task main()
{
  BACKWARD_TIME = INITIAL_BACKWARD_TIME;
  hits = 0;
  TOO_CLOSE = INITIAL_DISTANCE;
  global_vars_reset();

  SetSensorLowspeed(IN_4);
  SetSensorTouch(IN_1);
  SetSensorLight(IN_2);

  Precedes(touch,keep_wall_distance,hit_ball);
}
