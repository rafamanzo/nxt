#define GRAY 32
#define BLACK 20
#define RED 61
#define BASE_SPEED 35

#define HIT_POTENCY 85
#define NORTH 323
#define SOUTH 105

int SPEED;
int LEFT;
int PID;

sub rotate180()
{
     /*int sinal = 1;
     if(LEFT) sinal = -1;
     
     OnRevReg(OUT_A,sinal*75, OUT_REGMODE_SPEED);
     OnFwdReg(OUT_B,sinal*75, OUT_REGMODE_SPEED);
     Wait(810);
     Off(OUT_AB);*/
     
     if( LEFT == 1 ){
         RotateMotor(OUT_A, 75, 120);
         RotateMotor(OUT_B, 75, -360);
         OnRevReg(OUT_AB, 75, OUT_REGMODE_SPEED);
         Wait(600);
         Off(OUT_AB);
         RotateMotor(OUT_A, 75, 600);
     }else{
         RotateMotor(OUT_B, 75, 120);
         RotateMotor(OUT_A, 75, -360);
         OnRevReg(OUT_AB, 75, OUT_REGMODE_SPEED);
         Wait(600);
         Off(OUT_AB);
         RotateMotor(OUT_B, 75, 600);
     }
}

sub rotate_dir(){
     RotateMotor(OUT_B,75, 520);
     Wait(1300);
     Off(OUT_AB);
}

sub rotate_esq(){
     RotateMotor(OUT_A,75, 520);
     Wait(1300);
     Off(OUT_AB);
}

sub backward(){
    OnRevReg(OUT_AB,SPEED*2,OUT_REGMODE_SPEED);
    Wait(900);
    Off(OUT_AB);
}


sub hit_left(int pot)
{
    RotateMotor(OUT_C,pot,-110);
}

sub hit_right(int pot)
{
    RotateMotor(OUT_C,pot,110);
}

sub rotate_bat()
{
    RotateMotor(OUT_C,40,52);
    PlayTone(440,1000);
    
}

task launcher()
{
    int color = 0;

    while(TRUE)
    {
        color = Sensor(IN_1);

        if(color > GRAY-3 && color < GRAY+3)
        {
            rotate_bat();
        }
        else if(color > RED )
        {
            SPEED = (BASE_SPEED/2);
            if(LEFT) hit_left(HIT_POTENCY);
            else if(!LEFT) hit_right(HIT_POTENCY);
        }
        else if(color > BLACK -3 && color < BLACK + 3)
        {
            SPEED = (BASE_SPEED/2);
            if(LEFT) hit_right(HIT_POTENCY/4);
            else if(!LEFT) hit_left(HIT_POTENCY/4);
        }
        Wait(1000);
        SPEED = BASE_SPEED;
    }

}

int correcao(int dist){
  int e, u;

  if (LEFT)
  {
    e = (dist-NORTH);
  }
  else{
    e = (dist-SOUTH);
  }
  
  u = e;
  if(u > 5) u = 5;
  if(u < -5) u = -5;
  
  return u;
}

task imprime(){
  int compass;

  while(TRUE){
    ClearScreen();
    compass = SensorHTCompass(IN_4);
    NumOut(30,60, compass);
    Wait(1000);
  }
}

task colector()
{
    int u, compass;
    while(TRUE)
    {
        compass = SensorHTCompass(IN_4);

        u = correcao(compass);

        OnFwdReg(OUT_A, SPEED-u,OUT_REGMODE_SPEED);
        OnFwdReg(OUT_B, SPEED+u,OUT_REGMODE_SPEED);
        if(Sensor(IN_2))
        {
          Off(OUT_AB);
          backward();
          rotate180();
          LEFT = !LEFT;
          // LOGICA PARA ANDAR NUM RETANGULO EM UM DOS ROBOS
          Off(OUT_AB);
        }
    }
}

task main()
{
  LEFT = 1;
  SPEED = BASE_SPEED;
  SetSensorLight(IN_1);
  SetSensorTouch(IN_2);
  SetSensorLowspeed(IN_4);
  //Precedes( colector, launcher);

  Precedes( imprime);
}
